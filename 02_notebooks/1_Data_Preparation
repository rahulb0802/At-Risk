{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMGZKxX2xlubHGd0ScEHQol"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"FcSbipkJKMPx"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import fredapi as fa\n","import os\n","from datetime import datetime\n","\n","# Drive mounting\n","from google.colab import drive\n","from google.colab import userdata\n","\n","drive.mount('/content/drive')\n","\n","\n","BASE_PATH = \"/content/drive/MyDrive/Diffusion_Indices_Project/\"\n","DATA_PATH = os.path.join(BASE_PATH, \"01_data\")\n","INTERMEDIATE_PATH = os.path.join(BASE_PATH, \"03_intermediate_data\")"]},{"cell_type":"code","source":["# Load and Transform FRED-MD Data\n","print(\"Loading and transforming FRED-MD data...\")\n","all_vars_raw = pd.read_csv(os.path.join(DATA_PATH, 'fredmd.csv'))\n","\n","# Extract transformation codes (tcodes)\n","tcodes = all_vars_raw.iloc[0, 1:].astype(int)\n","\n","\n","data = all_vars_raw.iloc[1:].copy()\n","data = data.rename(columns={'sasdate': 'Date'})\n","data['Date'] = pd.to_datetime(data['Date'])\n","data = data.set_index('Date')\n","\n","\n","for col in data.columns:\n","    data[col] = pd.to_numeric(data[col], errors='coerce')\n","\n","# Function to apply transformations based on tcode\n","def transform_series(series, code):\n","    if code == 1:\n","        return series  # No transformation\n","    elif code == 2:\n","        return series.diff()  # First difference\n","    elif code == 3:\n","        return series.diff().diff()  # Second difference\n","    elif code == 4:\n","        return np.log(series)  # Log\n","    elif code == 5:\n","        return np.log(series).diff()  # Log first difference\n","    elif code == 6:\n","        return np.log(series).diff().diff()  # Log second difference\n","    else: # code == 7\n","        return series.pct_change(periods=12) * 100 # Percent change YoY\n","\n","# Apply transformations to all series\n","X_transformed = pd.DataFrame(index=data.index)\n","for col_name, code in tcodes.items():\n","    if col_name in data.columns:\n","        X_transformed[col_name] = transform_series(data[col_name], code)\n","\n","print(f\"FRED-MD data transformed. Shape: {X_transformed.shape}\")"],"metadata":{"id":"-0lD-WAZK6WI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load and Prepare Target Variable (USRECM)\n","print(\"\\nLoading target variable (USRECM)...\")\n","try:\n","    API_KEY = userdata.get('API_KEY')\n","    fred = fa.Fred(api_key=API_KEY)\n","    y_raw = fred.get_series('USRECM', observation_start='1959-01-01')\n","    y_raw.name = 'USRECM'\n","    print(\"USRECM data loaded successfully.\")\n","except Exception as e:\n","    print(f\"Could not load USRECM data from FRED API. Error: {e}\")"],"metadata":{"id":"UeWlrer_N-Se"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"\\nLoading and preparing Yield Spread from yieldspread.csv...\")\n","\n","\n","def robust_date_parser(date_str):\n","    \"\"\"This function is meant to handle inconsistent date formats in the yieldspread.csv.\"\"\"\n","    parsed_date = None\n","\n","    try:\n","        parsed_date = pd.to_datetime(date_str, format='%d-%b-%y')\n","    except (ValueError, TypeError):\n","\n","        try:\n","            parsed_date = pd.to_datetime(date_str)\n","        except (ValueError, TypeError):\n","            return None\n","\n","\n","    if parsed_date.year > datetime.now().year:\n","        parsed_date = parsed_date.replace(year=parsed_date.year - 100)\n","\n","    return parsed_date\n","\n","try:\n","\n","    yield_spread_df = pd.read_csv(\n","        os.path.join(DATA_PATH, 'yieldspread.csv'),\n","        usecols=['Date', 'Spread']\n","    )\n","    # Clean column names from potential BOM characters and spaces\n","    yield_spread_df.columns = yield_spread_df.columns.str.replace(r'[^\\x00-\\x7F]+', '', regex=True).str.strip()\n","\n","    # Apply the date parser\n","    yield_spread_df['Date'] = yield_spread_df['Date'].apply(robust_date_parser)\n","\n","    # Drop any rows that couldn't be parsed\n","    yield_spread_df.dropna(subset=['Date'], inplace=True)\n","\n","    # Set index and resample to the start of the month for alignment\n","    yield_spread_df = yield_spread_df.set_index('Date')\n","    yield_spread_df = yield_spread_df.resample('MS').first()\n","\n","\n","    yield_spread_df = yield_spread_df.rename(columns={'Spread': 'YIELD_SPREAD'})\n","\n","    print(\"Yield spread loaded and parsed successfully from CSV.\")\n","    print(f\"Earliest yield spread date: {yield_spread_df.index.min().strftime('%Y-%m-%d')}\")\n","    print(f\"Latest yield spread date:   {yield_spread_df.index.max().strftime('%Y-%m-%d')}\")\n","\n","except Exception as e:\n","    print(f\"Could not load or parse yieldspread.csv. Error: {e}\")\n","    yield_spread_df = pd.DataFrame(columns=['YIELD_SPREAD'])"],"metadata":{"id":"JmHRAM01OB3J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"\\n--- Loading and Preparing ADS Index ---\")\n","\n","\n","ads_csv_path = os.path.join(DATA_PATH, 'ads_index.csv')\n","TARGET_START_DATE = '1960-01-01'\n","\n","try:\n","    ads_df_daily = pd.read_csv(\n","        ads_csv_path,\n","        header=0,\n","        index_col=0,\n","        usecols=[0, 1]\n","    )\n","    ads_df_daily.index.name = 'Date'\n","    ads_df_daily.index = pd.to_datetime(ads_df_daily.index, format='%Y:%m:%d', errors='coerce')\n","    ads_df_daily.dropna(inplace=True)\n","    print(f\"Successfully loaded {len(ads_df_daily)} daily observations.\")\n","\n","    # Resample to Monthly\n","    ads_df_monthly_raw = ads_df_daily[['ADS_Index']].resample('MS').mean()\n","    print(f\"Resampled to monthly. Raw start date: {ads_df_monthly_raw.index.min().strftime('%Y-%m-%d')}\")\n","\n","\n","    # Create the full, correct date range we need\n","    full_date_range = pd.date_range(start=TARGET_START_DATE, end=ads_df_monthly_raw.index.max(), freq='MS')\n","\n","    # Reindex the monthly ADS data to this full range\n","    ads_df_monthly = ads_df_monthly_raw.reindex(full_date_range)\n","\n","    # back-fill the NaNs\n","    ads_df_monthly.bfill(inplace=True)\n","\n","\n","    print(\"\\\\nADS Index data is now clean, aligned, and ready.\")\n","    if ads_df_monthly.isna().any().any():\n","        print(\"CRITICAL WARNING: NaNs still exist after back-filling.\")\n","    else:\n","        print(\"Final DataFrame is clean with no NaNs.\")\n","\n","    print(f\"Final DataFrame now correctly starts on: {ads_df_monthly.index.min().strftime('%Y-%m-%d')}\")\n","    print(\"\\nVerifying the start of the final series:\")\n","    print(ads_df_monthly.head())\n","\n","except Exception as e:\n","    print(f\"\\\\nAn error occurred during ADS data preparation: {e}\")\n","    ads_df_monthly = pd.DataFrame()"],"metadata":{"id":"9Ds5x6cxaKzR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"\\nAligning and saving analysis-ready datasets...\")\n","\n","# Combine all base datasets and align indices\n","final_df = pd.concat([y_raw, yield_spread_df[['YIELD_SPREAD']], ads_df_monthly, X_transformed], axis=1)\n","\n","# Define the analysis window\n","ANALYSIS_START_DATE = '1960-01-01'\n","ANALYSIS_END_DATE = '2024-12-01'\n","\n","# Slice the combined dataframe\n","final_df = final_df.loc[ANALYSIS_START_DATE:ANALYSIS_END_DATE]\n","\n","\n","final_df = final_df.dropna(axis=0, how='all', subset=final_df.columns.drop('USRECM'))\n","\n","print(f\"\\nFinal analysis window set from {final_df.index.min().strftime('%Y-%m-%d')} to {final_df.index.max().strftime('%Y-%m-%d')}\")\n","\n","\n","\n","# Target Variable\n","final_df[['USRECM']].to_pickle(os.path.join(INTERMEDIATE_PATH, 'y_target.pkl'))\n","print(f\"Saved y_target.pkl with {len(final_df)} observations.\")\n","\n","# Yield Spread Predictor\n","final_df[['YIELD_SPREAD']].to_pickle(os.path.join(INTERMEDIATE_PATH, 'X_yield.pkl'))\n","print(f\"Saved X_yield.pkl with {len(final_df)} observations.\")\n","\n","\n","# ADS Index\n","final_df[['ADS_Index']].to_pickle(os.path.join(INTERMEDIATE_PATH, 'X_ads.pkl'))\n","print(f\"Saved X_ads.pkl with {len(final_df)} observations.\")\n","\n","# Transformed FRED-MD Predictors\n","X_transformed_aligned = final_df[X_transformed.columns]\n","X_transformed_aligned.to_pickle(os.path.join(INTERMEDIATE_PATH, 'X_transformed_monthly.pkl'))\n","print(f\"Saved X_transformed_monthly.pkl with shape {X_transformed_aligned.shape}.\")\n","\n","# Untransformed FRED-MD Data (just in case)\n","data_untransformed_aligned = data.reindex(final_df.index)\n","data_untransformed_aligned.to_pickle(os.path.join(INTERMEDIATE_PATH, 'X_untransformed_monthly.pkl'))\n","print(f\"Saved X_untransformed_monthly.pkl with shape {data_untransformed_aligned.shape}.\")\n","\n","# Transformation Codes\n","tcodes.to_pickle(os.path.join(INTERMEDIATE_PATH, 'tcodes.pkl'))\n","print(\"Saved tcodes.pkl.\")\n","\n","print(\"\\n--- Data Preparation Complete ---\")\n","print(f\"Analysis-ready datasets saved in: {INTERMEDIATE_PATH}\")"],"metadata":{"id":"fAW-zECzTunR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"JiGyt_v-c8ni"},"execution_count":null,"outputs":[]}]}